<!doctype html>
<html>
<head>
<title>通俗地说，我们(不)研究如何让程序员失业</title>
<meta charset="utf-8">
<link href="../styles.css" rel="stylesheet">
</head>
<body>
<div class="page" lang="zh-hans">
<div class="header">
<img src="../image/masterpiece01.jpg" width="951" height="177" alt=""/>
<h1><a href="https://username-CY.github.io/">CY's Blog</a></h1>
<h2>Never say never</h2>
</div>
<div class="article">
<h1>通俗地说，我们(不)研究如何让程序员失业</h1>
<p> 介绍一个虽然小众却非常重要的研究领域——“程序设计语言”（Programming Languages）。&nbsp;</p>
<p>&nbsp;两年前，我还在找工作。当时有个常见面试题：</p>
<p>&nbsp;“如果你的科研一切顺利，百分之百成功，那么二十年后会发生什么？”</p>
<p>&nbsp;原本我的第一反应是：
  
  “既然目标是将软件开发自动化，如果百分之百成功了，那么所有的程序员都会失业。”&nbsp; </p>
<p>如果真这么答，那失业的人将不是别的程序员，而是我自己。毕竟大部分人并不会因为许多人失业而高兴。&nbsp;</p>
<p>&nbsp;正确的回答应当是：
  
  “我们会让程序员更高产，他们将更快地创造出更好的软件，跑得更快、功能更强、质量更高，所有人都很开心！”&nbsp;</p>
<p>&nbsp;这，才是教授应该说的话[doge]。
  
  结局大家也看到了——我真的找到了工作。 </p>
<hr>

<p> 言归正传，为什么我一度认为，自己研究的是如何让程序员失业呢？&nbsp; </p>
<p>这就要提到“程序设计语言”（Programming Languages）领域所关心的话题了。</p>
<p>&nbsp;“程序设计语言”这个名字其实有点过时，看字面意思好像我们专注于开发新的语言，但实际情况并不局限于此。只是由于历史缘故，从计算机诞生的早期就开始有人研究如何设计语言使得编程更容易，当时的名字沿用至今。&nbsp;</p>
<p>&nbsp;近几十年，这个社区关心的话题已经变宽泛了许多，放宽到运算——&nbsp;</p>
<p>&nbsp;<strong>如何更好地进行运算？&nbsp;</strong></p>
<p> 任何运算，无论哪门语言、哪种平台，只要涉及“如何更好地进行运算？”这个问题，都可以成为程序设计语言这个研究领域服务的对象。</p>
<p>&nbsp;典型的研究目标包括：&nbsp;</p>
<p>&nbsp; 如何帮助人们以程序的形式实现出他们想要进行的运算？技术路线包括language design、types、program synthesis、probabilistic programming等。&nbsp;</p>
<p>&nbsp;如何检验一个程序的功能是否确实做到了人们想让它进行的运算？技术路线包括formal verification
  
  、model checking、testing等。&nbsp;</p>
<p>&nbsp;如何帮助人们理解现有的程序？技术路线包括static analysis
  、dynamic analysis、reverse engineering
  
  等。&nbsp;</p>
<p>&nbsp;如何把现有的程序变得更好？技术路线包括compiler optimization、approximate computing、program repair、language translation等。&nbsp;</p>
<p>&nbsp;领域内还有跨界学者紧跟时代潮流，与大语言模型结合（边用LLM
  解决程序设计语言领域的经典问题、边为LLM提供更合理的交互方式），与区块链结合，与量子计算
  
  结合，与其他新型运算平台结合……&nbsp;</p>
<p>&nbsp;只要涉及运算，即可成为这个领域关注的问题。&nbsp;</p>
	<hr>
    <p>&nbsp;大家可能听说过一个与程序设计语言相近的领域，叫“软件工程”（Software Engineering）。&nbsp;</p>
    <p>&nbsp;可以说，程序设计语言领域关心的问题是软件工程的子集。只不过前者的社区整体更关注技术深度，后者的社区整体更关注实用性。两个社区倾向于使用不同的技术，但他们的研究问题有时源于相似的动机。&nbsp;</p>
    <p>&nbsp;虽然本文重点是程序设计语言，但我们实验室的研究内容两边都有所涉及。&nbsp;</p>
	<hr>
    <p>&nbsp;程序设计语言这个领域，不怎么内卷。既适合潜心钻研，又不愁没饭吃。&nbsp;</p>
    <p>&nbsp;对于程序设计语言专家的需求广泛存在：&nbsp;</p>
    <p>&nbsp;软件公司需要开发、检验、维护代码，这个过程目前消耗大量人力。我们的研究目标之一就是将这些过程变得更加自动化。&nbsp;</p>
    <p>&nbsp;硬件厂商需要编译团队，才能使用户充分地享受到由底层硬件带来的优势。我们领域许多技术发挥作用的媒介正是编译工具。&nbsp;</p>
    <p>&nbsp;虽然需求多，但门槛较高，专家相对较少，人才储备整体供不应求。&nbsp;</p>
	 <hr>
    <p>&nbsp;这个领域，科研工作多种多样。
       
       由于涵盖的问题范围广、可用的技术手段多、可尝试的切入点五花八门，即使同为程序设计语言领域的科研工作者都不一定能互相听懂对方的研究内容。</p>
    <p>&nbsp;所以，同学们也可以发挥各自的专长和想象力，八仙过海，各显神通。&nbsp;</p>
    <p>&nbsp;举个例子，假如你想解决“手机app泄漏用户隐私数据”这个问题，可以有多种切入点，取决于你是更喜欢编程，还是更喜欢数学？&nbsp;</p>
    <p>&nbsp;如果你更喜欢编程，可以做务实风格的研究。你可以实现一个工具，对手机app进行“静态分析
       
       ”，自动追踪数据在代码中各个变量间的流动方式，依此判断用户隐私数据是否有可能流向外网，一旦流向外网则警告用户（改编自NDSS'15的一篇论文）。&nbsp;</p>
    <p>&nbsp;如果你更喜欢数学，可以做文雅风格的研究。你可以设计一种数据类型，用于表示各条数据“是否属于隐私”，只要把手机app代码中涉及隐私的数据标注成这个类型，再对标注后的代码进行自动的“类型检查”，就能借助数学证明来确保用户隐私数据不流向外网了（改编自POPL'12的一篇论文）。&nbsp;</p>
    <p>&nbsp;如果你两个都要？恭喜，你的选题范围更宽。你可以发明一种算法，对手机app代码进行某些神奇的改造，一边证明这个算法正确，一边把它实现出来，展示它确实好用。
       
       或许上面的问题听起来有点难，但入门级别的好玩的课题也有很多，比如我们实验室的本科生短期实习课题：&nbsp;</p>
    <p>&nbsp;大一：实现IDE插件。</p>
    <p>&nbsp;大二：自动分析网站是否有bug。</p>
    <p>&nbsp;大三：修改编译工具，使其自动替换特定的代码片段。&nbsp;</p>
    <p>&nbsp;研究生的课题时间跨度更长，做的事也更精彩。&nbsp;</p>
    <p>&nbsp;总之，问题种类丰富，技术路线也多。既可以偏工程，又可以偏理论，还可介于两者之间。&nbsp;</p>
    <p>&nbsp;具有不同兴趣和品味的同学，都有机会在这里找到属于自己的一片天。&nbsp;</p>
    <p>&nbsp;如果你选择程序设计
      
      语言这个研究领域——
      
    你将会提升“在混沌中探寻问题本质”的思辨能力。&nbsp;</p>
    <p>&nbsp;由于程序设计语言领域中许多问题在一般形式下是不可判定的，所以，选题过程的常见挑战，便是如何选择一个既可解、又有意义的合理的目标。你将在选题和尝试解决问题的过程中反复进行这方面的思维训练。&nbsp;</p>
    <p>&nbsp;你将会提升“将复杂问题拆解成小块、分而治之”的实战能力。</p>
    <p>&nbsp;程序设计语言领域的科研工作，很多都需要动手编程，你将在实现一个个有趣的功能的同时锻炼自己的工程能力；另一种可能性，某些课题更强调理论贡献，你将在形式化建模
       
       和证明的过程中一步步建立起优雅缜密的数学系统，体验用数学解决实际问题的美。无论哪种情况，作为课题的主要贡献者，你将对复杂的问题进行拆解，搭建整体框架，并完成大部分的代码或证明，这些化解问题的经历将给你带来成就感。&nbsp;</p>
    <p>&nbsp;你还会提升“即使被扔到陌生环境都知道如何探路并选择前进方向”的领导能力。
       
       因为程序设计语言相关技术可服务的场景众多，你将会遇到新鲜的应用场景和需求，然后临场采集信息，活学活用，大胆决策。</p>
     <p>你将在接受陌生环境挑战的过程中，变得更自信、有主见、勇于创新。
</div>
<div class="footer">
&mdash; HKUST<br>
</div>
</div>
</body>
</html>
